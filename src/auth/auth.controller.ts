import { Controller, Request, Post, UseGuards, Get } from '@nestjs/common'
import { AuthService } from './auth.service'
import { LocalAuthGuard } from './guards/local-auth.guard'
import { JwtAuthGuard } from './guards/jwt-auth.guard'

@Controller('auth')
export class AuthController {
  constructor(private readonly authService: AuthService) {}

  @Post('login')
  @UseGuards(LocalAuthGuard)
  async login(@Request() req) {
    return this.authService.login(req.user)
  }

  @Get('profile')
  @UseGuards(JwtAuthGuard)
  getProfile(@Request() req) {
    return req.user //данные пользователя в данном случае берутся из JWT-токена
  }
}
//getProfile является обработчиком для запросов HTTP GET на маршрут /auth/profile. Когда поступает запрос на этот маршрут, контроллер автоматически вызывает метод getProfile

/* Поступает HTTP GET-запрос на /auth/profile.
Срабатывает @UseGuards(JwtAuthGuard), который проверяет наличие и действительность JWT-токена.
Если токен валиден, JwtAuthGuard добавляет декодированные данные в req.user.
Вызывается метод getProfile, который использует req.user для формирования ответа. */

/* @UseGuards(JwtAuthGuard) является декоратором, который применяется к методам контроллера в NestJS и указывает, что для доступа к этому методу должен быть пройден JwtAuthGuard.

JwtAuthGuard в свою очередь является гвардом (guard), который встроен в NestJS для обработки аутентификации на основе JSON Web Token (JWT). Когда вы добавляете @UseGuards(JwtAuthGuard) к методу контроллера, это означает, что перед выполнением этого метода будет вызван JwtAuthGuard для проверки наличия и валидности JWT-токена в запросе.

Если токен отсутствует, не валиден или истек, JwtAuthGuard может прервать выполнение запроса и вернуть ошибку аутентификации. Если токен валиден, информация о пользователе из токена будет доступна в объекте запроса (req.user), что позволяет вашему контроллеру использовать эту информацию для выполнения дополнительных действий. */

/* в NestJS декоратор @UseGuards(AuthGuard('local')) применяется к маршруту, чтобы использовать стратегию аутентификации (LocalStrategy в данном случае) для проверки подлинности пользователя.

Когда запрос поступает на маршрут, защищенный @UseGuards, AuthGuard запускает соответствующую стратегию аутентификации, в данном случае, LocalStrategy. В процессе выполнения этой стратегии, NestJS автоматически извлекает данные (например, email и password) из запроса и передает их методу validate внутри LocalStrategy.

Код, который автоматически обрабатывает эту передачу данных, содержится внутри самого фреймворка, и вам не нужно явно извлекать данные из запроса. Вместо этого вы просто определяете метод validate в вашей стратегии, который ожидает эти данные в виде аргументов. */

/* @Post('login'): Этот декоратор устанавливает HTTP-метод и путь маршрута для обработки запросов. В данном случае, это POST-запрос по пути /auth/login.

@UseGuards(LocalAuthGuard): Этот декоратор применяет гвард (Guard) к маршруту. Гварды в NestJS используются для обработки различных аспектов запроса, например, аутентификации, авторизации и других проверок. LocalAuthGuard - это гвард, связанный с вашей локальной стратегией аутентификации (LocalStrategy), который вы ранее определили. Этот гвард выполняет процесс аутентификации при запросе на этот маршрут.

async login(@Request() req): Это метод контроллера, обрабатывающий запрос на вход в систему. Декоратор @Request() позволяет получить доступ к объекту запроса Express, который содержит информацию о запросе от клиента. В данном методе login ожидается, что LocalAuthGuard прошел успешно (т.е., пользователь успешно аутентифицирован).

return this.authService.login(req.user): В этой строке вызывается метод login вашего сервиса аутентификации (AuthService). req.user предоставляется LocalAuthGuard после успешной аутентификации и содержит информацию о пользователе, возвращенную вашей стратегией аутентификации. Обычно это объект, представляющий пользователя.

this.authService.login: Метод login вашего сервиса аутентификации (AuthService). Вероятно, он выполняет какие-то дополнительные действия, связанные с аутентификацией, и возвращает некоторую информацию о пользователе, которую вы хотите вернуть клиенту (например, токен аутентификации). */
